
from fastapi import APIRouter

from pydantic import BaseModel
import base64

from lib.crypto import decrypt_aes

router = APIRouter()

# TODO:
# - Deploy and store keys (as seals?) - Save keys!
# - Send encrypted data to service
# - Return count based on code generated by Dafny

_KEYS = {}
_DATA = {}

class KeyItem(BaseModel):
    key: str
    userid: str

class PositionItem(BaseModel):
    position: str
    iv: str
    userid: str

@router.get("/hello", tags=["taxi"])
async def hello():
    return "Hello from Taxi congestion service"

@router.post("/key")
async def add_key(keyitem:KeyItem):
    key = base64.b64decode(keyitem.key)
    uid = str(keyitem.userid)
    _KEYS[uid]=key
    print("Stored new key for user", uid)
    print("Keys:", _KEYS)

@router.post("/position")
async def add_position(items: list[PositionItem]):
    print(_KEYS)
    for item in items:
        encrypted = base64.b64decode(item.position)
        iv = base64.b64decode(item.iv)
        userid=item.userid
        print("User id:", userid)

        raw=decrypt_aes(encrypted, _KEYS[userid], iv)
        _DATA[userid]=raw
        print(f"Adding data:\'{raw}\' for user", userid)

@router.get("/zone/{zone_id}")
async def get_taxis_in_zone(zone_id:int):
    print("Should compute number of taxis in zone:", zone_id)
    from functions import verified_count
    zone_count = []
    for userid, value in _DATA.items():
        # print("userid:", userid, 'value:', value)
        zone_count.append(int(value))
    print("Zone count:", zone_count)
    res = verified_count(zone_id, zone_count)
    print("Result:", res)
    return res
