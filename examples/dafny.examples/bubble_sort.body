{
  b := new int[a.Length];
  assert a.Length == b.Length;
  var l:=0;
  while (l<b.Length && l<a.Length)
  invariant l<=b.Length
  invariant a[..l] == b[..l]
  invariant l>0 ==> multiset(b[..l])==multiset(a[..l])
  {
    b[l] := a[l];
    l:=l+1;
  }
  assert a[..] == b[..];

  var i := b.Length - 1;
  var tmp := 1;
  while (i > 0)
    invariant i < 0 ==> b.Length == 0
    invariant -1 <= i < b.Length
    invariant forall ii,jj::i <= ii< jj <b.Length ==> b[ii] <= b[jj]
    invariant forall k,k'::0<=k<=i<k'<b.Length==>b[k]<=b[k']
    invariant multiset(b[..])==multiset(a[..])
  {
    var j := 0;
    while (j < i)
      invariant 0 < i < b.Length && 0 <= j <= i
      invariant forall ii,jj::i<= ii <= jj <b.Length ==> b[ii] <= b[jj]
      invariant forall k, k'::0<=k<=i<k'<b.Length==>b[k]<=b[k']
      invariant forall k :: 0 <= k <= j ==> b[k] <= b[j]
      invariant multiset(b[..])==multiset(a[..])
    {
      if (b[j] > b[j + 1])
      {
	tmp := b[j];
	b[j] := b[j+1];
	b[j+1] := tmp;
        // b[j], b[j + 1] := b[j + 1], b[j];
      }
      j := j + 1;
    }
    i := i - 1;
  }
}