
# Copyright (C) 2023 Gramine contributors
# SPDX-License-Identifier: BSD-3-Clause

# Python3 manifest example
# loader.insecure__use_cmdline_argv = true
loader.argv = [
    "gramine-ratls", "/tmp/cert.pem", "/tmp/key.pem", "--",
    "/usr/bin/python3", "main.py",
]
loader.entrypoint = "file:{{ gramine.libos }}"
# libos.entrypoint = "{{ entrypoint }}"
libos.entrypoint = "/gramine-ratls"

# libos.entrypoint = "{{ "/usr/local/bin/uvicorn" }}"
# libos.entrypoint = "/bin/sh"
fs.start_dir = "/scripts"

loader.log_level = "{{ log_level }}"

loader.env.LD_LIBRARY_PATH = "/lib:/lib:{{ arch_libdir }}:/usr/{{ arch_libdir }}"

# Python's NumPy spawns as many threads as there are CPU cores, and each thread
# consumes a chunk of memory, so on large machines 1G enclave size may be not enough.
# We limit the number of spawned threads via OMP_NUM_THREADS env variable.
loader.env.OMP_NUM_THREADS = "4"
loader.env.PATH = "/usr/bin"

loader.env.MALLOC_ARENA_MAX = "1"
# sys.disallow_subprocesses = true

# sgx.file_check_policy = "allow_all_but_log"

sys.enable_sigterm_injection = true

fs.mounts = [
  { path = "/lib", uri = "file:{{ gramine.runtimedir() }}" },
  { path = "/gramine-ratls", uri = "file:/usr/bin/gramine-ratls" },
  { path = "{{ arch_libdir }}", uri = "file:{{ arch_libdir }}" },
  { path = "/usr/{{ arch_libdir }}", uri = "file:/usr/{{ arch_libdir }}" },

{% for path in python.get_sys_path(entrypoint) %}
  { path = "{{ path }}", uri = "file:{{ path }}" },
{% endfor %}

  { path = "{{ entrypoint }}", uri = "file:{{ entrypoint }}" },
  # { path = "/etc/hosts", uri = "file:helper-files/hosts" },

  { type = "tmpfs", path = "/tmp" },
  { type = "encrypted", path = "/data/", uri = "file:./data", key_name = "_sgx_mrsigner" },
  # { type = "encrypted", path = "/data/", uri = "file:./data", key_name = "_sgx_mrenclave" },
  # { type = "encrypted", path = "/data/", uri = "file:./data"},

  # Add bash
  { path = "/usr/bin", uri = "file:/usr/bin"},

  # Add Dafny
  { path = "/usr/lib/dafny", uri = "file:./dafny" },

  # Add Bandit
  { path = "/usr/local/bin/bandit", uri = "file:/usr/local/bin/bandit" },


  { path = "/scripts/", uri = "file:./scripts" },
  { path = "/templates/", uri = "file:./templates" },
  { path = "/input/", uri = "file:./input" },
  { path = "/usr/local/bin/uvicorn", uri="file:/usr/local/bin/uvicorn"},

  { type = "tmpfs", path = "/dev/shm/" },
  # { path = "/dev/shm/", uri="file:/dev/shm"}
]

# sys.stack.size = "4M"
# sys.enable_extra_runtime_domain_names_conf = true

# sgx.debug = false
sgx.debug = true
sgx.edmm_enable = {{ 'true' if env.get('EDMM', '0') == '1' else 'false' }}
sgx.enclave_size = "4G"
# sgx.max_threads = {{ '1' if env.get('EDMM', '0') == '1' else '32' }}
sgx.max_threads = 64

sgx.remote_attestation = "{{ ra_type }}"
sgx.ra_client_spid = "{{ ra_client_spid }}"
sgx.ra_client_linkable = {{ 'true' if ra_client_linkable == '1' else 'false' }}

sgx.trusted_files = [
  "file:{{ gramine.libos }}",
  "file:{{ entrypoint }}",
  "file:{{ gramine.runtimedir() }}/",
  "file:{{ arch_libdir }}/",
  "file:/usr/{{ arch_libdir }}/",
  {% for path in python.get_sys_path(entrypoint) %}
  "file:{{ path }}{{ '/' if path.is_dir() else '' }}",
  {% endfor %}
  "file:scripts/",
  "file:templates/",
  # "file:helper-files/",

  "file:/usr/bin/",
  "file:./dafny/",
  # "file:./data/",
  # "file:./data/lib/maxlib/",

  "file:/usr/local/bin/uvicorn",
]

sgx.allowed_files = [
  "file:./input/"
]